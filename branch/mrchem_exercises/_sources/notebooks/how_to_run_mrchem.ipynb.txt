{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f9ebe14a-5c13-4a90-bc37-e3d01b6579c0",
   "metadata": {},
   "source": [
    "# How to call MRChem\n",
    "There are two main strategies for performing an MRChem calculation: 1) the traditional approach using the terminal and terminal tools like `vim` or `emacs`; or 2) doing everything in the Jupyter notebook by writing simple functions to generate the input and submit the calculation.\n",
    "\n",
    "\n",
    "## Using the terminal\n",
    "Open a new Jupyter Lab terminal by from the Jupyter Launcher (blue button with white \"+\").\n",
    "This works like any other linux terminal, and you can edit input files and look at output files here to complete the exercise.\n",
    "\n",
    "MRChem with OpenMP parallelization should already be pre-installed from our conda distribution.\n",
    "In order to start an MRChem calculation, you just call the input parser (`mrchem`) from the command line like this:\n",
    "\n",
    "```bash\n",
    "OMP_NUM_THREADS=16 mrchem jobname.inp\n",
    "```\n",
    "\n",
    "This will parse the *user* input file (`jobname.inp`) and generate a *program* input file in JSON format (`jobname.json`), and then pass the program input to the binary MRChem executable and redirect `stdout` to the output file (`jobname.out`). The output is also stored in `jobname.json` in JSON format in a separate output section, and this file serves as a complete record of the calculation (including both the input and output). In the example above, MRChem will use 16 threads as defined in the `OMP_NUM_THREADS` environment variable.\n",
    "\n",
    "## Using the notebook\n",
    "Another way to call MRChem is to do everything in the notebook. This would mean that you write a function that generates the input file, and then a function which calls MRChem using the `subprocess` module.\n",
    "This strategy is the one used in the solution to these exercises, since everything then can be contained within the notebook environment, from input generation to doing the calculation, to data analysis and visualization.\n",
    "\n",
    "We provide these scripts, and they should work in a black box manner. However, you are encouraged to look at how they are defined by checking out the file `utils/functions.py` to see how they work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3def6602-3512-4e48-ad3d-e1f0bc49ecb2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
