{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ffe985c2-add9-4c14-b996-480b6b2bdcd6",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Quantum chemistry in Vampyr - The Hydrogen atom\n",
    "\n",
    "In order to solve the KS equations in MWs we reformulate them in an integral form [1].\n",
    "\n",
    "$$ \\phi_i = -2\\hat{G}_{\\mu_i}\\hat{V}\\phi_i $$\n",
    "\n",
    "Where $\\hat{V}$ is the potential acting on the system, $\\phi_i$ is the i-th KS orbital,   $\\hat{G}$ is the Helmholtz integral operator, where its kernel is defined as \n",
    "$$G_\\mu(r - r') = \\frac{\\exp(-\\mu |r - r'|)}{4\\pi |r - r'|}$$\n",
    "and $\\mu$ is a parameter defined above through the orbital energies. The kinetic and orbital energies are included in $\\hat{G}$. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1470d120-74ea-4b13-b118-43390dcde46a",
   "metadata": {},
   "source": [
    "The Helmholtz operator is already implemented in vampyr, therefore the only things you need are the integral KS equation and the definition of $\\mu$ \n",
    "\n",
    "$$     \\mu_i = \\sqrt{-2\\epsilon_i} $$\n",
    "\n",
    "The way you initialize the Helmholtz operator is as follows\n",
    "```\n",
    "H = vp.HelmholtzOperator( mra, exp=mu, prec=eps )\n",
    "```\n",
    "where `mu` is the $\\mu$ is the parameter defined above, mra you have seen before, and `eps` is the desired threshold precision. This operator is applied the same way you applied the `vp.ScalingProjector` earlier."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57925b12-0138-45a3-82fc-e62f377c955c",
   "metadata": {},
   "source": [
    "In this exercise you will be solving the KS equation iteratively for a simple system, the Hydrogen atom. This means that you only have the nuclear potential to take into account for the potential term in the KS equation.\n",
    "\n",
    "$$    V_{nuc}(\\mathbf{r}) = -\\frac{1}{|\\mathbf{r}|}$$\n",
    "\n",
    "We will also be working with a single orbital, of which the initial guess is\n",
    "\n",
    "$$    \\phi_0(\\mathbf{r}) = e^{-|\\mathbf{r}|^2} $$\n",
    "where \n",
    "$$    |\\mathbf{r}| = \\sqrt{x^2 + y^2 + z^2}$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b94969a8-534d-495c-9630-683412cba821",
   "metadata": {},
   "source": [
    "The orbital update is defined as follows\n",
    "$$    \\Delta\\tilde{\\phi}^n = -2\\hat{G}[V_{nuc}\\phi^n] - \\phi^n \\\\\n",
    "    \\Delta\\tilde{\\phi}^n = \\tilde{\\phi}^{n+1} - \\phi^n $$\n",
    "where we use \\~ to denote a function that is **not** normalized, and $n$ is the iteration index.\n",
    "\n",
    "The energy update is then defined by\n",
    "$$\n",
    "    \\Delta \\epsilon^n = \\frac{<\\Delta\\tilde{\\phi}^n|V\\phi_n>}{||\\tilde{\\phi}^{n+1}||}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b20f364-9010-401b-8908-bcedb7cbffdb",
   "metadata": {},
   "source": [
    "What you need to do in this exercise is\n",
    "1. Make a nuclear potential as a python function\n",
    "2. Make an initial guess for the orbital as a python function\n",
    "3. Project both nuclear potential and orbital through vampyr\n",
    "4. Normalize orbital\n",
    "5. Create a Helmholtz operator with $\\mu$ as shown above, use an initial guess for $\\epsilon$ (-0.5 is a good starting guess)\n",
    "6. Compute the orbital update through application of the Helmholtz operator\n",
    "7. Compute the energy update\n",
    "8. Update both orbital and energy\n",
    "9. Repeat steps 4-8 until your orbital energies have converged\n",
    "\n",
    "The convergence criterion is the norm of $\\Delta \\phi^n$, but you should start by looping a set amount of times before trying the threshold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d08504dd-db3b-4ffb-b718-c9f132759376",
   "metadata": {},
   "outputs": [],
   "source": [
    "from vampyr import vampyr3d as vp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "r_x = np.linspace(-0.99, 0.99, 1000) # create an evenly spaced set of points between -0.99 and 0.99\n",
    "r_y = np.zeros(1000)\n",
    "r_z = np.zeros(1000)\n",
    "r = [r_x, r_y, r_z]\n",
    "\n",
    "# Analytic nuclear potential\n",
    "def f_nuc(r):\n",
    "    #implement the nuclear potential\n",
    "    return\n",
    "\n",
    "# Analytic guess for solution\n",
    "def f_phi(r):\n",
    "    # implement the initial guess for the orbital\n",
    "    return\n",
    "\n",
    "#implement the starting guess\n",
    "\n",
    "\n",
    "i = 0\n",
    "while (i < 10):\n",
    "    # implement the SCF\n",
    "    \n",
    "    # this will plot each of your orbitals, ucomment the lines below to do so\n",
    "    #phi_n_plt = [phi_n([x, 0.0, 0.0]) for x in r_x]\n",
    "    #plt.plot(r_x, phi_n_plt) \n",
    "    \n",
    "    # you should also print your energies among other things, uncomment the line below to do so\n",
    "    #print(E_n)\n",
    "    i += 1\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29843b6b-d8ab-433b-9fab-e7d34c193922",
   "metadata": {},
   "source": [
    "\n",
    "## 4 Sources\n",
    "\n",
    "\n",
    "[1] Stig Rune Jensen, Santanu Saha, JosÃ© A. Flores-Livas, William Huhn, Volker Blum, Stefan Goedecker, and Luca Frediani The Elephant in the Room of Density Functional Theory Calculations. The Journal of Physical Chemistry Letters 2017 8 (7), 1449-1457\n",
    "DOI: 10.1021/acs.jpclett.7b00255\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
