{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0c5bf1b1",
   "metadata": {},
   "source": [
    "# Exercise 3: Compute NMR Shielding Constants and Magnetizibility for a Transition Metal Complex\n",
    "\n",
    "Below you will find links to all all the relevant pages of the MRChem documentation. Please refer to these if you need more details on how to set up the calculations.\n",
    "\n",
    "[<img src=\"https://img.shields.io/badge/Documentation-Main_Page-orange.svg?logo=LOGO\">](https://mrchem.readthedocs.io/en/latest/)\n",
    "[<img src=\"https://img.shields.io/badge/I_Need_Help-Installation-teal.svg?logo=LOGO\">](https://mrchem.readthedocs.io/en/latest/installation.html)\n",
    "[<img src=\"https://img.shields.io/badge/I_Need_Help-How_To_Run-green.svg?logo=LOGO\">](https://mrchem.readthedocs.io/en/latest/users/running.html)\n",
    "[<img src=\"https://img.shields.io/badge/I_Need_Help-Input_Quick_Guide-blue.svg?logo=LOGO\">](https://mrchem.readthedocs.io/en/latest/users/user_inp.html)\n",
    "[<img src=\"https://img.shields.io/badge/I_Need_Help-Input_Reference-purple.svg?logo=LOGO\">](https://mrchem.readthedocs.io/en/latest/users/user_ref.html)\n",
    "[<img src=\"https://img.shields.io/badge/I_Need_Help-JSON_Output-red.svg?logo=LOGO\">](https://mrchem.readthedocs.io/en/latest/users/program_json.html)\n",
    "\n",
    "## Introduction\n",
    "In this exercise you will use the MRChem code to compute NMR shielding constants and magnetizibilities for a Ni(CO)_3 complex bound to an N-Heterocyclic Carbene (NHC) ligand. \n",
    "NHCs are commonly used in organometallic chemistry, and are often involved in catalytic cycles.\n",
    "They contain a zero-valent carbon atom that acts as a very strong sigma-donor, which often coordinates to a transition metal.\n",
    "Due to the bulky nature of many NHCs, they are used to help stabilize reactive or exotic chemical species.\n",
    "\n",
    "The NHC used here is depicted in the image below. One usually tunes the NHC by substituing the methyl groups with larger and more bulky side groups.\n",
    "______"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4fc14ba6-38f3-45ad-ad5d-6a8d212feb95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/3dmoljs_load.v0": "<div id=\"3dmolviewer_1634315125386257\"  style=\"position: relative; width: 200px; height: 200px\">\n        <p id=\"3dmolwarning_1634315125386257\" style=\"background-color:#ffcccc;color:black\">You appear to be running in JupyterLab (or JavaScript failed to load for some other reason).  You need to install the 3dmol extension: <br>\n        <tt>jupyter labextension install jupyterlab_3dmol</tt></p>\n        </div>\n<script>\n\nvar loadScriptAsync = function(uri){\n  return new Promise((resolve, reject) => {\n    var tag = document.createElement('script');\n    tag.src = uri;\n    tag.async = true;\n    tag.onload = () => {\n      resolve();\n    };\n  var firstScriptTag = document.getElementsByTagName('script')[0];\n  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n});\n};\n\nif(typeof $3Dmolpromise === 'undefined') {\n$3Dmolpromise = null;\n  $3Dmolpromise = loadScriptAsync('https://3dmol.org/build/3Dmol.js');\n}\n\nvar viewer_1634315125386257 = null;\nvar warn = document.getElementById(\"3dmolwarning_1634315125386257\");\nif(warn) {\n    warn.parentNode.removeChild(warn);\n}\n$3Dmolpromise.then(function() {\nviewer_1634315125386257 = $3Dmol.createViewer($(\"#3dmolviewer_1634315125386257\"),{backgroundColor:\"white\"});\nviewer_1634315125386257.zoomTo();\n\tviewer_1634315125386257.addModel(\"22\\nNi(CO)3-NHC-1_pbe\\nNi 0.074051 2.689887 -0.944680\\nC 1.070426 1.795078 0.249622\\nC -0.930165 1.581987 -1.936855\\nC -1.006232 3.882408 -0.150204\\nO -1.613806 0.863823 -2.544899\\nO 1.727628 1.220572 1.016707\\nO -1.737687 4.620271 0.372631\\nH 0.544794 6.212746 -0.934483\\nH 0.681844 1.839839 -4.340555\\nC 1.553072 5.765601 -0.827873\\nC 2.723782 5.234855 -2.988940\\nN 1.862008 4.898368 -1.952677\\nH 2.306751 6.572527 -0.770737\\nC 2.757860 4.154997 -3.830645\\nC 1.336791 3.640293 -2.113605\\nH 3.242637 6.196735 -3.037450\\nN 1.915643 3.198768 -3.277438\\nC 1.675489 1.885498 -3.852197\\nH 3.312348 3.988273 -4.758829\\nH 2.460321 1.664223 -4.598859\\nH 1.570966 5.173633 0.105566\\nH 1.700890 1.125238 -3.050055\\n\");\n\tviewer_1634315125386257.setStyle({\"stick\": {}});\n\tviewer_1634315125386257.zoomTo();\nviewer_1634315125386257.render();\n});\n</script>",
      "text/html": [
       "<div id=\"3dmolviewer_1634315125386257\"  style=\"position: relative; width: 200px; height: 200px\">\n",
       "        <p id=\"3dmolwarning_1634315125386257\" style=\"background-color:#ffcccc;color:black\">You appear to be running in JupyterLab (or JavaScript failed to load for some other reason).  You need to install the 3dmol extension: <br>\n",
       "        <tt>jupyter labextension install jupyterlab_3dmol</tt></p>\n",
       "        </div>\n",
       "<script>\n",
       "\n",
       "var loadScriptAsync = function(uri){\n",
       "  return new Promise((resolve, reject) => {\n",
       "    var tag = document.createElement('script');\n",
       "    tag.src = uri;\n",
       "    tag.async = true;\n",
       "    tag.onload = () => {\n",
       "      resolve();\n",
       "    };\n",
       "  var firstScriptTag = document.getElementsByTagName('script')[0];\n",
       "  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n",
       "});\n",
       "};\n",
       "\n",
       "if(typeof $3Dmolpromise === 'undefined') {\n",
       "$3Dmolpromise = null;\n",
       "  $3Dmolpromise = loadScriptAsync('https://3dmol.org/build/3Dmol.js');\n",
       "}\n",
       "\n",
       "var viewer_1634315125386257 = null;\n",
       "var warn = document.getElementById(\"3dmolwarning_1634315125386257\");\n",
       "if(warn) {\n",
       "    warn.parentNode.removeChild(warn);\n",
       "}\n",
       "$3Dmolpromise.then(function() {\n",
       "viewer_1634315125386257 = $3Dmol.createViewer($(\"#3dmolviewer_1634315125386257\"),{backgroundColor:\"white\"});\n",
       "viewer_1634315125386257.zoomTo();\n",
       "\tviewer_1634315125386257.addModel(\"22\\nNi(CO)3-NHC-1_pbe\\nNi 0.074051 2.689887 -0.944680\\nC 1.070426 1.795078 0.249622\\nC -0.930165 1.581987 -1.936855\\nC -1.006232 3.882408 -0.150204\\nO -1.613806 0.863823 -2.544899\\nO 1.727628 1.220572 1.016707\\nO -1.737687 4.620271 0.372631\\nH 0.544794 6.212746 -0.934483\\nH 0.681844 1.839839 -4.340555\\nC 1.553072 5.765601 -0.827873\\nC 2.723782 5.234855 -2.988940\\nN 1.862008 4.898368 -1.952677\\nH 2.306751 6.572527 -0.770737\\nC 2.757860 4.154997 -3.830645\\nC 1.336791 3.640293 -2.113605\\nH 3.242637 6.196735 -3.037450\\nN 1.915643 3.198768 -3.277438\\nC 1.675489 1.885498 -3.852197\\nH 3.312348 3.988273 -4.758829\\nH 2.460321 1.664223 -4.598859\\nH 1.570966 5.173633 0.105566\\nH 1.700890 1.125238 -3.050055\\n\");\n",
       "\tviewer_1634315125386257.setStyle({\"stick\": {}});\n",
       "\tviewer_1634315125386257.zoomTo();\n",
       "viewer_1634315125386257.render();\n",
       "});\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3D viewer for the water molecule\n",
    "import py3Dmol\n",
    "\n",
    "view = py3Dmol.view(width=200, height=200)\n",
    "view.addModel(open('geometries/Ni_NHC.xyz').read())\n",
    "view.setStyle({'stick': {}})\n",
    "view.zoomTo()\n",
    "view.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1b8358d-9a52-4212-a5cb-727bc041f0fc",
   "metadata": {},
   "source": [
    "## How to run the calculation\n",
    "Due to the size of the system, we need to run this calculation on one of the national HPC clusters. The instructions here are specific to `Saga`.\n",
    "\n",
    "We need a submit script where we set up the calculation, since we are submitting to the `SLURM` queueing manager. We will be using MRChem in a hybrid OpenMP+MPI parallelization mode, which ensures very good scaling on HPC clusters. \n",
    "\n",
    "We provide a convenience script that you can copy to the cluster (`runMRChem.sh`), to use for setting up the SLURM variables, loading MRChem, and copying files to/from the scratch directory.\n",
    "Here is the usage:\n",
    "\n",
    "```\n",
    "Usage: ./runMRChem.sh [ -h ] [ -i JOBNAME ] [ -t NTASKS ] [ -c NCPUS ] [ -T TIMELIMIT ] [ -m MEMORY ] [ -x ]\n",
    "\n",
    "Optional arguments:\n",
    "-h                : Show this message and exit 0\n",
    "-i <JOBNAME>      : Input file w.o. extension (.inp assumed)  default: jobname\n",
    "-t <NTASKS>       : Number of MPI processes                   default: 8\n",
    "-c <NCPUS>        : Number of OMP threads                     default: 8\n",
    "-T <TIMELIMIT>    : Wall time limit in SLURM format           default: 10:00:00\n",
    "-m <MEMORY>       : Total memory in GB                        default: 60\n",
    "-x                : Submit job to queue                       default: false\n",
    "```\n",
    "\n",
    "**Note**: You may have to make the script executable:\n",
    "\n",
    "```console\n",
    "user@saga:~$ chmod +x runMRChem.sh\n",
    "```\n",
    "\n",
    "The file `runMRChem.sh` generates a job file `jobname.job` like this (using default values):\n",
    "\n",
    "```bash\n",
    "#!/bin/bash\n",
    "\n",
    "#SBATCH --account=nn4654k\n",
    "#SBATCH --mail-type=None\n",
    "#SBATCH --job-name=jobname\n",
    "#SBATCH --output=jobname.log\n",
    "#SBATCH --error=jobname.err\n",
    "#SBATCH --time=10:00:00\n",
    "#SBATCH --mem=60GB\n",
    "#SBATCH --ntasks=8\n",
    "#SBATCH --cpus-per-task=8\n",
    "\n",
    "module purge\n",
    "module load MRChem/toolchain-version\n",
    "\n",
    "cp jobname.inp \n",
    "cd \n",
    "export OMP_NUM_THREADS=8\n",
    "mrchem --launcher 'srun -n 8' jobname.inp\n",
    "\n",
    "savefile jobname.out\n",
    "savefile jobname.json\n",
    "exit 0\n",
    "```\n",
    "\n",
    "which you can submit to the queue with this command\n",
    "\n",
    "```console\n",
    "user@saga:~$ sbatch jobname.job\n",
    "```\n",
    "\n",
    "You can also let the script submit your job automatically by adding the `-x` flag (but this only makes sense if you are running the script on the remote cluster).\n",
    "If your jobfile already exists, you will be prompted to confirm the overwrite.\n",
    "\n",
    "Example usage:\n",
    "\n",
    "```console\n",
    "user@saga:~$ ./runMRChem.sh -i Ni_NHC -t 25 -T '30:00:00' -m 160GB -x\n",
    "```\n",
    "___________\n",
    "\n",
    "## The MRChem input file\n",
    "Below is an outline of an MRChem input for an NMR properties calculation at the MW3 precision level.\n",
    "Try to use the documentation pages to find the relevant keywords for setting up the calculation.\n",
    "If you need additional help, don't hesitate to ask :)\n",
    "\n",
    "```\n",
    "world_prec = 1.0e-3\n",
    "world_unit = angstrom\n",
    "\n",
    "Molecule {\n",
    "  $coords\n",
    "  ...\n",
    "  $end\n",
    "}\n",
    "\n",
    "WaveFunction {\n",
    "}\n",
    "\n",
    "SCF {\n",
    "}\n",
    "\n",
    "Properties {\n",
    "}\n",
    "\n",
    "Response {\n",
    "}\n",
    "\n",
    "```\n",
    "______\n",
    "\n",
    "## Computational details\n",
    "* The GTO results were computed with the `PBE` functional, and so you should also use `PBE` if the results are to comparable.\n",
    "* An optimized geometry of the TM complex is supplied in `./geometries/Ni_NHC.xyz`.\n",
    "* Use a KAIN SCF and response accelerator history of 15.\n",
    "* Make sure the SCF and response `max_iter` options are large enough (100 should be plenty).\n",
    "* As starting guess, `sad_tz` at MW4 precision works well.\n",
    "\n",
    "> **Note**\n",
    "> Input blocks are case sensitive, while keywords inside blocks are not\n",
    "_____"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e39b81c-2bd4-49fc-bf9f-3aed51e35f63",
   "metadata": {},
   "source": [
    "## Instructions\n",
    " 1. Generate the input files. You can either do this on the cluster, or write your own Python functions here and then copy to the cluster.\n",
    " \n",
    " 2. Submit the calculations as described above. Check in on the job regularly to see if it runs as expected.\n",
    " \n",
    " 3. You are encouraged to take a look at the output file (`jobname.out`) to look at the information printed here, and also to check out the JSON output file (`jobname.json`) to see the same output in a very scripting friendly format.\n",
    " \n",
    " 4. Extract the relevant information from either the `jobname.out` file or the `jobname.json` file, and do something interesting with it???\n",
    "  _______\n",
    "\n",
    "## Convenience scripts\n",
    "A class `MRChemOutput` is provided in the `./utils/functions.py` file to aid in fetching relevant properties from the JSON output file. In addition, it has methods for plotting the SCF convergence.\n",
    "\n",
    "(You can of course also open the output files directly in the terminal and extract the data manually if you prefer.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b00e385f-73c8-4896-866a-3a972e6fd803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class MRChemOutput in module utils.functions:\n",
      "\n",
      "class MRChemOutput(builtins.object)\n",
      " |  MRChemOutput(jsonfile)\n",
      " |  \n",
      " |  Convenience class for accessing data from an MRChem calculation.\n",
      " |  \n",
      " |  You can access the JSON data via the data attribute.\n",
      " |  For example, to get the final SCF total energy:\n",
      " |  \n",
      " |  \n",
      " |  []: calc = MRChemOutput('jobname.json')\n",
      " |      E_tot = calc.data['output']['properties']['scf_energy']['E_tot']\n",
      " |  \n",
      " |  Additionally, the JSON is loaded as a nested SimpleNamespace\n",
      " |  (stored in the ns attribute),\n",
      " |  and you can quickly navigate the dict by 'dotting' through\n",
      " |  the keys. Tab completion should work for this in the Jupyter\n",
      " |  environment:\n",
      " |  \n",
      " |  []: E_tot = calc.ns.output.properties.scf_energy.E_tot\n",
      " |  \n",
      " |  Known bug\n",
      " |  Some keys are not valid Python variable names,\n",
      " |  and you cannot access the levels below these keys by dotting.\n",
      " |  Workaround: use __.getattribute__(key) to access such keys.\n",
      " |  \n",
      " |  A few methods are also provided that serve as shortcuts\n",
      " |  for navigating the data dictionary, and for plotting\n",
      " |  SCF convergence data.\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, jsonfile)\n",
      " |      Parameters:\n",
      " |      jsonfile <str>: Path to MRChem output JSON file\n",
      " |  \n",
      " |  getFinalSCFEnergy(self) -> float\n",
      " |      Return optimized SCF energy in Hartrees.\n",
      " |  \n",
      " |  getNMRShieldingAnisotropy(self) -> dict\n",
      " |      Return anisotropy of the diagonalized NMR shielding tensor.\n",
      " |  \n",
      " |  getNMRShieldingIsotropicAverage(self) -> dict\n",
      " |      Return isotropic average of total NMR shielding tensor.\n",
      " |  \n",
      " |  getNMRShieldingTensors(self) -> dict\n",
      " |      Return total NMR shielding tensor.\n",
      " |  \n",
      " |  getNMRShieldingTensorsDiagonalized(self) -> dict\n",
      " |      Return diagonalized total NMR shielding tensor.\n",
      " |  \n",
      " |  getNMRShieldingTensorsDiamagnetic(self) -> dict\n",
      " |      Return diamagnetic contribution to NMR shielding tensor.\n",
      " |  \n",
      " |  getNMRShieldingTensorsParamagnetic(self) -> dict\n",
      " |      Return paramagnetic contribution to NMR shielding tensor.\n",
      " |  \n",
      " |  getResponseConvergence(self) -> list\n",
      " |      Return convergence data for the x, y, and z dimension response SCFs.\n",
      " |  \n",
      " |  getSCFConvergence(self) -> list\n",
      " |      Return list of tuples containing total energy, energy update, and MO residuals\n",
      " |      for all SCF iterations.\n",
      " |  \n",
      " |  getWalltime(self)\n",
      " |  \n",
      " |  normalTermination(self)\n",
      " |  \n",
      " |  plotResponseConvergence(self)\n",
      " |      Plot the response SCF convergence in terms of the property, property update, and MO residual.\n",
      " |  \n",
      " |  plotSCFConvergence(self)\n",
      " |      Plot the SCF convergence in terms of total energy, energy udpates, and MO residuals.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from utils.functions import MRChemOutput\n",
    "\n",
    "help(MRChemOutput)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac107096-417d-4d31-9931-04e8c7bfbfb0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
